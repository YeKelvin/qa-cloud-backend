[uwsgi]
# 由于外部还要嵌套Nginx，这里可以使用socket进行通信，如果Nginx和uwsgi部署在同一台机器上，直接使用127.0.0.1
# 如果外部直接通过uwsgi访问服务，需将socket改为http-socket或者http，将127.0.0.1改为0.0.0.0
# 使用nginx连接时使用
socket = 127.0.0.1:5000
# uwsgi不建议使用root权限去启动uwsgi实例
# 可以通过root用户去运行uwsgi文件，当通过uid和gid去修改用户（移除root权限）
# 并且，如果你使用的是socket的通信方式，最好加上chmod-socket字段
chmod-socket = 664
# 直接做web服务器时使用
;http = 127.0.0.1:5000
# 工作路径
chdir = /opt/qa-cloud-backend
# 虚拟环境路径
virtualenv = %(chdir)/.cache/virtualenvs/xxx
# 额外的环境变量
; env= CONFIG_PATH=/usr/local/etc/qa-cloud/config.ini
# flask 对象
module = main:app
# flask应用实例的名称，是flask独有的配置项
# 由于flask存在特殊的机制，可以实例化多个application，需要明确指出，收到请求时，uwsgi应该调用哪个应用实例
;callable = qacloud
# master 进程
master = true
# 进程数，可设为机器核数+1
processes = 2
# 每个进程的线程数
threads = 20
# 允许用内嵌的语言启动线程。这将允许你在app程序中产生一个子线程
enable-threads = true
# 开启 websocket
http-websockets = true
gevent = 1000
async = 100
# socket 监听队列大小（默认：100）
listen = 1024
# buffer 大小
buffer-size=3276800
# 在每个worker而不是master中加载应用
lazy-apps = true
# 当服务器退出的时候自动删除 unix socket 文件和 pid 文件
vacuum = true
die-on-term = true
# 启用监控，使用nc 127.0.0.1 9191 查看 (nc 安装:yum -y install nmap-ncat)
stats = 0.0.0.0:9191
# 避免惊群效应
thunder-lock = true
# 请求超时时间（秒）, 一个请求耗时超过了指定的时间，那么这个请求会被丢弃，并且当前处理这个请求的进程会被回收再利用
harakiri = 60
# 为每个进程设置请求数的上限。当一个进程处理的请求数达到这个值，那么该进程就会被回收重用（重启），你可以使用这个选项来默默地对抗内存泄漏
max-requests = 5000
# 禁用日志记录
;disable-logging = true
# 使进程在后台运行，并将日志输出到指定的日志文件
daemonize = uwsgi.log
# 日志文件大小最大值，超过则分割文件
log-maxsize = 5000000
# 进程号
pidfile = uwsgi.pid
