[tool.poetry]
name = "qa-cloud-backend"
version = "0.1.0"
description = ""
authors = ["Kelvin.Ye <testmankelvin@163.com>"]
packages = [
    {include = "app"}
]

# https://pypi.org/classifiers/
#classifiers = [
#    ""
#]

[[tool.poetry.source]]
name = "aliyun"
url = "https://mirrors.aliyun.com/pypi/simple"
default = true

[tool.poetry.dependencies]
python = "^3.8"
# Flask
flask = "2.2.3"
flask-sqlalchemy = "3.0.3"
flask-socketio = "5.3.3"
flask-migrate = "4.0.4"
flask-apscheduler = "1.12.4"
# job
apscheduler = "3.10.1"
# id
ulid-py = "1.1.0"
# Encryption
pyjwt = "2.5.0"
# Environment
python-dotenv = "1.0.0"
environs = "9.5.0"
# HTTP
requests="*"
# 私仓依赖
pymeter = { path = "../pymeter", develop = true }

[tool.poetry.group.dev.dependencies]
pytest = "*"
pytest-html = "*"
ruff = "*"
yapf = "*"
black = "*"
types-orjson = "*"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
src = ["app"]
select = [
    "F",    # pyflakes
    "UP",   # pyupgrade
    "E",    # pycodestyle-error
    "W",    # pycodestyle-warning
    "D",    # pydocstyle
    "I",    # isort
]
ignore = [
    "D100",
    "D103",
    "D104"
]
exclude = [
    "__pycache__/",
    ".cache/",
    ".git/",
    "*.log"
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-local-folder = ["app"]
force-single-line = true
lines-after-imports = 2

[tool.yapf]
column_limit = 120
indent_width = 4
arithmetic_precedence_indication = true
blank_line_before_nested_class_or_def = true
blank_lines_between_top_level_imports_and_variables = 2
coalesce_brackets = true
dedent_closing_brackets = true
join_multiple_lines = true
spaces_before_comment = 2
split_before_dot = true
